import { Pagination } from "./GenericTypes";
export interface PoolResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: Pool[];
    /** * Pagination metadata. */
    pagination: Pagination;
}
export interface Pool {
    /** * The pair address. */
    exchange: string;
    swap_count_24h: string;
    /** * The total liquidity converted to fiat in `quote-currency`. */
    total_liquidity_quote: string;
    volume_24h_quote: string;
    fee_24h_quote: string;
    /** * Total supply of this pool token. */
    total_supply: bigint | null;
    /** * The exchange rate for the requested quote currency. */
    quote_rate: string;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    volume_7d_quote: string;
    annualized_fee: string;
    token_0: Token;
    token_1: Token;
}
export interface Token {
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    volume_in_24h: string;
    volume_out_24h: string;
    /** * The exchange rate for the requested quote currency. */
    quote_rate: string;
    reserve: string;
    /** * The contract logo URL. */
    logo_url: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: string;
    volume_in_7d: string;
    volume_out_7d: string;
}
export interface PoolToDexResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested address. */
    address: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: PoolToDexItem[];
}
export interface PoolToDexItem extends SupportedDex {
    /** * The dex logo URL. */
    logo_url: string;
}
export interface SupportedDex {
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    factory_contract_address: string;
    router_contract_addresses: string;
    swap_fee: number;
}
export interface PoolByAddressResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: PoolWithTimeseries[];
    /** * Pagination metadata. */
    pagination: Pagination;
}
export interface PoolWithTimeseries {
    /** * The pair address. */
    exchange: string;
    swap_count_24h: string;
    /** * The total liquidity converted to fiat in `quote-currency`. */
    total_liquidity_quote: string;
    volume_24h_quote: string;
    fee_24h_quote: string;
    /** * Total supply of this pool token. */
    total_supply: bigint | null;
    /** * The exchange rate for the requested quote currency. */
    quote_rate: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    volume_7d_quote: string;
    annualized_fee: string;
    token_0: Token;
    token_1: Token;
    token_0_reserve_quote: string;
    token_1_reserve_quote: string;
    volume_timeseries_7d: VolumeTimeseries[];
    volume_timeseries_30d: VolumeTimeseries[];
    liquidity_timeseries_7d: LiquidityTimeseries[];
    liquidity_timeseries_30d: LiquidityTimeseries[];
    price_timeseries_7d: PriceTimeseries[];
    price_timeseries_30d: PriceTimeseries[];
}
export interface VolumeTimeseries {
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    dt: string;
    /** * The pair address. */
    exchange: string;
    sum_amount_0_in: string;
    sum_amount_0_out: string;
    sum_amount_1_in: string;
    sum_amount_1_out: string;
    volume_quote: string;
    token_0_quote_rate: string;
    token_1_quote_rate: string;
    swap_count_24: string;
}
export interface LiquidityTimeseries {
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    dt: string;
    /** * The pair address. */
    exchange: string;
    r0_c: string;
    r1_c: string;
    liquidity_quote: string;
    token_0_quote_rate: string;
    token_1_quote_rate: string;
}
export interface PriceTimeseries {
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    dt: string;
    /** * The pair address. */
    exchange: string;
    price_of_token_0_in_token_1: string;
    price_of_token_0_in_token_1_description: string;
    price_of_token_1_in_token_0: string;
    price_of_token_1_in_token_0_description: string;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: string;
    price_of_token_0_in_quote_currency: string;
    price_of_token_1_in_quote_currency: string;
}
export interface PoolsDexDataResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested address. */
    address: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: string;
    /** * List of response items. */
    items: PoolsDexDataItem[];
    /** * Pagination metadata. */
    pagination: Pagination;
}
export interface PoolsDexDataItem {
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    /** * The pair address. */
    exchange: string;
    /** * The combined ticker symbol of token0 and token1 separated with a hypen. */
    exchange_ticker_symbol: string;
    /** * The dex logo URL for the pair address. */
    exchange_logo_url: string;
    /** * The total liquidity converted to fiat in `quote-currency`. */
    total_liquidity_quote: number;
    /** * A prettier version of the total liquidity quote for rendering purposes. */
    pretty_total_liquidity_quote: string;
    /** * The volume 24h converted to fiat in `quote-currency`. */
    volume_24h_quote: number;
    /** * The volume 7d converted to fiat in `quote-currency`. */
    volume_7d_quote: number;
    /** * The fee 24h converted to fiat in `quote-currency`. */
    fee_24h_quote: number;
    /** * A prettier version of the volume 24h quote for rendering purposes. */
    pretty_volume_24h_quote: string;
    /** * A prettier version of the volume 7d quote for rendering purposes. */
    pretty_volume_7d_quote: string;
    /** * A prettier version of the fee 24h quote for rendering purposes. */
    pretty_fee_24h_quote: string;
    /** * Token0's contract metadata and reserve data. */
    token_0: PoolsDexToken;
    /** * Token1's contract metadata and reserve data. */
    token_1: PoolsDexToken;
}
export interface PoolsDexToken {
    /** * The reserves for the token. */
    reserve: string;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * The contract logo URL. */
    logo_url: string;
    /** * The exchange rate for the requested quote currency. */
    quote_rate: number;
}
export interface AddressExchangeBalancesResponse {
    /** * The requested address. */
    address: string;
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: UniswapLikeBalanceItem[];
}
export interface UniswapLikeBalanceItem {
    token_0: UniswapLikeToken;
    token_1: UniswapLikeToken;
    pool_token: UniswapLikeTokenWithSupply;
}
export interface UniswapLikeToken {
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * The contract logo URL. */
    logo_url: string;
    /** * The asset balance. Use `contract_decimals` to scale this balance for display purposes. */
    balance: bigint | null;
    quote: number;
    /** * The exchange rate for the requested quote currency. */
    quote_rate: number;
}
export interface UniswapLikeTokenWithSupply {
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * The contract logo URL. */
    logo_url: string;
    /** * The asset balance. Use `contract_decimals` to scale this balance for display purposes. */
    balance: bigint | null;
    quote: number;
    /** * The exchange rate for the requested quote currency. */
    quote_rate: number;
    /** * Total supply of this pool token. */
    total_supply: bigint | null;
}
export interface NetworkExchangeTokensResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: TokenV2Volume[];
    /** * Pagination metadata. */
    pagination: Pagination;
}
export interface TokenV2Volume {
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    total_liquidity: number;
    total_volume24h: number;
    /** * The contract logo URL. */
    logo_url: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    swap_count_24h: number;
    /** * The exchange rate for the requested quote currency. */
    quote_rate: number;
    /** * The total liquidity converted to fiat in `quote-currency`. */
    total_liquidity_quote: number;
    total_volume_24h_quote: number;
}
export interface SupportedDexesResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * List of response items. */
    items: SupportedDex[];
    /** * Pagination metadata. */
    pagination: Pagination;
}
export interface SingleNetworkExchangeTokenResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: PoolWithTimeseries[];
    /** * Pagination metadata. */
    pagination: Pagination;
}
export interface TransactionsForAccountAddressResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: ExchangeTransaction[];
    /** * Pagination metadata. */
    pagination: Pagination;
}
export interface ExchangeTransaction {
    /** * The block signed timestamp in UTC. */
    block_signed_at: Date;
    /** * The requested transaction hash. */
    tx_hash: string;
    act: string;
    /** * The requested address. */
    address: string;
    amount0: number;
    amount1: number;
    amount0_in: number;
    amount0_out: number;
    amount1_out: number;
    to_address: string;
    from_address: string;
    sender_address: string;
    total_quote: number;
    token_0: PoolToken;
    token_1: PoolToken;
    token_0_quote_rate: number;
    token_1_quote_rate: number;
}
export interface PoolToken {
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: boolean;
    /** * The contract logo URL. */
    logo_url: string;
}
export interface TransactionsForTokenAddressResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: ExchangeTransaction[];
    /** * Pagination metadata. */
    pagination: Pagination;
}
export interface TransactionsForExchangeResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: ExchangeTransaction[];
    /** * Pagination metadata. */
    pagination: Pagination;
}
export interface EcosystemChartDataResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: UniswapLikeEcosystemCharts[];
    /** * Pagination metadata. */
    pagination: Pagination;
}
export interface UniswapLikeEcosystemCharts {
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: string;
    gas_token_price_quote: number;
    total_swaps24h: number;
    total_active_pairs7d: number;
    total_fees24h: number;
    volume_chart7d: VolumeEcosystemChart[];
    volume_chart30d: VolumeEcosystemChart[];
    liquidity_chart7d: LiquidityEcosystemChart[];
    liquidity_chart30d: LiquidityEcosystemChart[];
}
export interface VolumeEcosystemChart {
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    dt: Date;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: string;
    volume_quote: number;
    swap_count_24: number;
}
export interface LiquidityEcosystemChart {
    /** * The name of the DEX, eg: `uniswap_v2`. */
    dex_name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    dt: Date;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: string;
    liquidity_quote: number;
}
export interface HealthDataResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: HealthData[];
    /** * Pagination metadata. */
    pagination: Pagination;
}
export interface HealthData {
    synced_block_height: number;
    synced_block_signed_at: Date;
    latest_block_height: number;
    latest_block_signed_at: Date;
}
