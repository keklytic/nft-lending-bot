import { DecodedItem, LogEvent, Pagination } from "./GenericTypes";
export interface BlockResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: Block[];
}
export interface Block {
    /** * The block signed timestamp in UTC. */
    signed_at: Date;
    /** * The block height. */
    height: number;
}
export interface ResolvedAddress {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: ResolvedAddressItem[];
}
export interface ResolvedAddressItem {
    /** * The requested address. */
    address: string;
    name: string;
}
export interface BlockHeightsResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: Block[];
    /** * Pagination metadata. */
    pagination: Pagination;
}
export interface GetLogsResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: GetLogsEvent[];
}
export interface GetLogsEvent {
    /** * The block signed timestamp in UTC. */
    block_signed_at: Date;
    /** * The height of the block. */
    block_height: number;
    /** * The hash of the block. */
    block_hash: string;
    /** * The offset is the position of the tx in the block. */
    tx_offset: number;
    /** * The offset is the position of the log entry within an event log. */
    log_offset: number;
    /** * The requested transaction hash. */
    tx_hash: string;
    /** * The log topics in raw data. */
    raw_log_topics: string;
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    sender_contract_decimals: number;
    /** * The name of the sender. */
    sender_name: string;
    /** * The ticker symbol for the sender. This field is set by a developer and non-unique across a network. */
    sender_contract_ticker_symbol: string;
    /** * The address of the sender. */
    sender_address: string;
    /** * The label of the sender address. */
    sender_address_label: string;
    /** * The contract logo URL. */
    sender_logo_url: string;
    /** * The log events in raw. */
    raw_log_data: string;
    /** * The decoded item. */
    decoded: DecodedItem;
}
export interface LogEventsByAddressResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: LogEvent[];
    /** * Pagination metadata. */
    pagination: Pagination;
}
export interface LogEventsByTopicHashResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: number;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: string;
    /** * List of response items. */
    items: LogEvent[];
    /** * Pagination metadata. */
    pagination: Pagination;
}
export interface AllChainsResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * List of response items. */
    items: ChainItem[];
}
export interface ChainItem {
    /** * The chain name eg: `eth-mainnet`. */
    name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    /** * True if the chain is a testnet. */
    is_testnet: boolean;
    /** * Schema name to use for direct SQL. */
    db_schema_name: string;
    /** * The chains label eg: `Ethereum Mainnet`. */
    label: string;
    /** * The category label eg: `Ethereum`. */
    category_label: string;
    /** * A svg logo url for the chain. */
    logo_url: string;
    /** * A black png logo url for the chain. */
    black_logo_url: string;
    /** * A white png logo url for the chain. */
    white_logo_url: string;
    /** * True if the chain is an AppChain. */
    is_appchain: boolean;
    /** * The ChainItem the appchain is a part of. */
    appchain_of: ChainItem;
}
export interface AllChainsStatusResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * List of response items. */
    items: ChainStatusItem[];
}
export interface ChainStatusItem {
    /** * The chain name eg: `eth-mainnet`. */
    name: string;
    /** * The requested chain ID eg: `1`. */
    chain_id: string;
    /** * True if the chain is a testnet. */
    is_testnet: boolean;
    /** * A svg logo url for the chain. */
    logo_url: boolean;
    /** * A black png logo url for the chain. */
    black_logo_url: string;
    /** * A white png logo url for the chain. */
    white_logo_url: string;
    /** * True if the chain is an AppChain. */
    is_appchain: boolean;
    /** * The height of the lastest block available. */
    synced_block_height: number;
    /** * The signed timestamp of lastest block available. */
    synced_blocked_signed_at: Date;
    /** * True if the chain has data and ready for querying. */
    has_data: boolean;
}
export interface ChainActivityResponse {
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested address. */
    address: string;
    /** * List of response items. */
    items: ChainActivityEvent[];
}
export interface ChainActivityEvent extends ChainItem {
    /** * The timestamp when the address was last seen on the chain. */
    last_seen_at: Date;
}
